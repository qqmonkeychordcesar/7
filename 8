def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var11 = func3(var7, arg1)
    var30 = func5(var7, arg2)
    var58 = var33(var11, arg1)
    var59 = func11()
    var60 = 820227646 | arg1 ^ (arg2 - (arg1 & arg2))
    var61 = var11 & var11
    result = var58 + var58 | var58 | (arg2 & var59 - var59 | var59 | (-142 + var60))
    return result
def func11():
    func9()
    result = len(xrange(11))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : -5
def func8(arg34, arg35):
    var36 = ((arg34 ^ -294) + arg35) ^ arg34
    var37 = ((arg35 + arg34) - arg34) ^ var36
    var38 = ((arg35 | arg34) | arg34) + var37
    var39 = -808 + arg35
    if arg34 < var37:
        var40 = (var39 & var38 + -864100572) - 854207064
    else:
        var40 = arg35 | (43014838 - arg34 ^ var39)
    var41 = (-578578019 + arg35) - 461 ^ arg35
    var42 = var36 - var36 + -519 ^ var36
    var43 = ((var36 | var39) + -84) + -852
    var44 = arg34 - (var42 ^ arg35)
    var45 = var43 + ((var37 & var39) ^ var39)
    var46 = var36 - var38 | var44 - var44
    var47 = var37 | var43 & var42
    var48 = (var43 & 1229448583 - var43) + var47
    var49 = var44 ^ var44 + var37
    if var41 < var49:
        var50 = 451056103 | var36 | var49
    else:
        var50 = var46 + var38 - var37 & -1549051271
    if var39 < var46:
        var51 = (var42 & var47) & var36 | var46
    else:
        var51 = var45 ^ var42
    var52 = 8 ^ var46
    var53 = var48 ^ var36
    var54 = (var42 ^ var45) & var46 ^ var49
    if var37 < var52:
        var55 = (var41 - arg35) + (var45 + var47)
    else:
        var55 = var39 & var37 + var46 | var43
    if var52 < var53:
        var56 = var46 & var54 ^ var48 ^ var49
    else:
        var56 = ((-37654498 & var53) - var41) + -1023869745
    var57 = (var39 | var53) & var39 + var45
    result = var47 ^ ((var37 & var48) | var54 & arg35)
    return result
def func7():
    closure = [9]
    def func6(arg31, arg32):
        closure[0] += func8(arg31, arg32)
        return closure[0]
    func = func6
    return func
var33 = func7()
def func5(arg12, arg13):
    var14 = (arg13 ^ 1677623515 | 1450794309) ^ arg13
    var15 = -946 | arg13 + 1077242244 | -771
    var16 = var14 ^ (var15 ^ 520) & 667
    var17 = -904 ^ -312
    var18 = (var17 + arg12) ^ (var15 + arg13)
    var19 = (arg12 | (var14 & var14)) - var14
    var20 = 741 ^ var15
    var21 = (arg13 | arg13) | 861
    if var20 < var18:
        var22 = arg13 + ((var18 - var20) - var16)
    else:
        var22 = (var18 ^ var19) & (var19 & var19)
    var23 = var15 - var14 + var21 & var20
    var24 = ((var16 ^ arg12) ^ var15) + var19
    var25 = var16 | (var15 | arg13)
    var26 = (var25 - -679) + var16 + -282
    var27 = -281558462 ^ var25
    var28 = var27 | ((var25 - var24) ^ var27)
    var29 = var19 - arg12
    result = var17 ^ var19
    return result
def func2(arg3, arg4):
    var5 = ((((arg4 + (((-645 | -2102118966) - -699 + arg3) - -34703097 | (arg3 & ((-782 | (((((393649349 & arg3 + arg4) & 876718064) - -1454993003) & arg4) - 947376504)) & -37)) + -354)) | arg3 + arg3) - arg4) - arg3) & 1855997876
    var6 = ((169867585 + (((-312902750 | arg3) + (var5 ^ arg3 | 6787809 + arg3)) - (((var5 - var5) | ((arg3 & var5) ^ arg3)) - ((658 + ((var5 | arg3) ^ -709)) ^ arg4) + arg3) ^ var5)) & arg4) ^ 1117185625 + 957
    result = -581 + arg4 & arg4 | (var6 & var6) & -637 | arg3
    return result
def func3(arg8, arg9):
    def func4(acc, rest):
        var10 = (2 | -5) & -5
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
